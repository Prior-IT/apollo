// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: address.sql

package sqlc

import (
	"context"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO address (street, number, extra_line, postal_code, city, country)
	VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
	id, street, number, postal_code, city, country, extra_line
`

type CreateAddressParams struct {
	Street     string
	Number     string
	ExtraLine  *string
	PostalCode string
	City       string
	Country    string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.Street,
		arg.Number,
		arg.ExtraLine,
		arg.PostalCode,
		arg.City,
		arg.Country,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Street,
		&i.Number,
		&i.PostalCode,
		&i.City,
		&i.Country,
		&i.ExtraLine,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM address
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAddress, id)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT
	id, street, number, postal_code, city, country, extra_line
FROM
	address
WHERE
	id = $1
LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id int32) (Address, error) {
	row := q.db.QueryRow(ctx, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Street,
		&i.Number,
		&i.PostalCode,
		&i.City,
		&i.Country,
		&i.ExtraLine,
	)
	return i, err
}

const listAddresses = `-- name: ListAddresses :many
SELECT
	id, street, number, postal_code, city, country, extra_line
FROM
	address
`

func (q *Queries) ListAddresses(ctx context.Context) ([]Address, error) {
	rows, err := q.db.Query(ctx, listAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Street,
			&i.Number,
			&i.PostalCode,
			&i.City,
			&i.Country,
			&i.ExtraLine,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE
	address
SET
	street = COALESCE($2, street),
	number = COALESCE($3, number),
	extra_line = COALESCE($4, extra_line),
	postal_code = COALESCE($5, postal_code),
	city = COALESCE($6, city),
	country = COALESCE($7, country)
WHERE
	id = $1
RETURNING
	id, street, number, postal_code, city, country, extra_line
`

type UpdateAddressParams struct {
	ID         int32
	Street     *string
	Number     *string
	ExtraLine  *string
	PostalCode *string
	City       *string
	Country    *string
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.ID,
		arg.Street,
		arg.Number,
		arg.ExtraLine,
		arg.PostalCode,
		arg.City,
		arg.Country,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Street,
		&i.Number,
		&i.PostalCode,
		&i.City,
		&i.Country,
		&i.ExtraLine,
	)
	return i, err
}
