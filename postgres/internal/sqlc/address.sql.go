// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: address.sql

package sqlc

import (
	"context"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO apollo.address (street, number, extra_line, postal_code, city, country)
	VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
	id, street, number, postal_code, city, country, extra_line
`

type CreateAddressParams struct {
	Street     string
	Number     int32
	ExtraLine  *string
	PostalCode int32
	City       string
	Country    string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (ApolloAddress, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.Street,
		arg.Number,
		arg.ExtraLine,
		arg.PostalCode,
		arg.City,
		arg.Country,
	)
	var i ApolloAddress
	err := row.Scan(
		&i.ID,
		&i.Street,
		&i.Number,
		&i.PostalCode,
		&i.City,
		&i.Country,
		&i.ExtraLine,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM apollo.address
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAddress, id)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT
	id, street, number, postal_code, city, country, extra_line
FROM
	apollo.address
WHERE
	id = $1
LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id int32) (ApolloAddress, error) {
	row := q.db.QueryRow(ctx, getAddress, id)
	var i ApolloAddress
	err := row.Scan(
		&i.ID,
		&i.Street,
		&i.Number,
		&i.PostalCode,
		&i.City,
		&i.Country,
		&i.ExtraLine,
	)
	return i, err
}
