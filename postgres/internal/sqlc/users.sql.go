// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO apollo.users (name, email)
    VALUES ($1, $2)
RETURNING
    id, name, email, joined
`

type CreateUserParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (ApolloUser, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email)
	var i ApolloUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Joined,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM apollo.users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAmountOfUsers = `-- name: GetAmountOfUsers :one
SELECT
    COUNT(*)
FROM
    apollo.users
`

func (q *Queries) GetAmountOfUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAmountOfUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
SELECT
    id, name, email, joined
FROM
    apollo.users
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (ApolloUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i ApolloUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Joined,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    id, name, email, joined
FROM
    apollo.users
ORDER BY
    RANDOM()
`

func (q *Queries) ListUsers(ctx context.Context) ([]ApolloUser, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApolloUser
	for rows.Next() {
		var i ApolloUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Joined,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
