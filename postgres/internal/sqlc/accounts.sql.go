// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO apollo.accounts (user_id, provider, provider_id)
    VALUES ($1, $2, $3)
RETURNING
    user_id, provider, provider_id
`

type CreateAccountParams struct {
	UserID     int32
	Provider   string
	ProviderID string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (ApolloAccount, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.Provider, arg.ProviderID)
	var i ApolloAccount
	err := row.Scan(&i.UserID, &i.Provider, &i.ProviderID)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM apollo.accounts
WHERE provider = $1 AND provider_id = $2
`

type DeleteAccountParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.Exec(ctx, deleteAccount, arg.Provider, arg.ProviderID)
	return err
}

const getUserForProvider = `-- name: GetUserForProvider :one
SELECT
    users.id, users.name, users.email, users.joined
FROM
    apollo.users
    INNER JOIN apollo.accounts ON users.id = accounts.user_id
WHERE
    accounts.provider = $1
    AND accounts.provider_id = $2
LIMIT 1
`

type GetUserForProviderParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) GetUserForProvider(ctx context.Context, arg GetUserForProviderParams) (ApolloUser, error) {
	row := q.db.QueryRow(ctx, getUserForProvider, arg.Provider, arg.ProviderID)
	var i ApolloUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Joined,
	)
	return i, err
}
