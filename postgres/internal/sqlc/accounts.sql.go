// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id, provider, provider_id)
    VALUES ($1, $2, $3)
RETURNING
    user_id, provider, provider_id
`

type CreateAccountParams struct {
	UserID     int32
	Provider   string
	ProviderID string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.Provider, arg.ProviderID)
	var i Account
	err := row.Scan(&i.UserID, &i.Provider, &i.ProviderID)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE provider = $1 AND provider_id = $2
`

func (q *Queries) DeleteAccount(ctx context.Context, provider string, providerID string) error {
	_, err := q.db.Exec(ctx, deleteAccount, provider, providerID)
	return err
}

const getUserForProvider = `-- name: GetUserForProvider :one
SELECT
    users.id, users.name, users.email, users.joined, users.admin, users.lang
FROM
    users
    INNER JOIN accounts ON users.id = accounts.user_id
WHERE
    accounts.provider = $1
    AND accounts.provider_id = $2
LIMIT 1
`

func (q *Queries) GetUserForProvider(ctx context.Context, provider string, providerID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserForProvider, provider, providerID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Joined,
		&i.Admin,
		&i.Lang,
	)
	return i, err
}
