// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account_cache.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountCache = `-- name: CreateAccountCache :one
INSERT INTO apollo.account_cache (name, email, provider, provider_id)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, name, email, provider, provider_id, created
`

type CreateAccountCacheParams struct {
	Name       *string
	Email      *string
	Provider   string
	ProviderID string
}

func (q *Queries) CreateAccountCache(ctx context.Context, arg CreateAccountCacheParams) (ApolloAccountCache, error) {
	row := q.db.QueryRow(ctx, createAccountCache,
		arg.Name,
		arg.Email,
		arg.Provider,
		arg.ProviderID,
	)
	var i ApolloAccountCache
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Created,
	)
	return i, err
}

const deleteAccountCache = `-- name: DeleteAccountCache :exec
DELETE FROM apollo.account_cache
WHERE id = $1
`

func (q *Queries) DeleteAccountCache(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccountCache, id)
	return err
}

const deleteAccountCacheOldEntries = `-- name: DeleteAccountCacheOldEntries :exec
DELETE FROM apollo.account_cache
WHERE created < NOW() - $1::interval
`

func (q *Queries) DeleteAccountCacheOldEntries(ctx context.Context, dollar_1 pgtype.Interval) error {
	_, err := q.db.Exec(ctx, deleteAccountCacheOldEntries, dollar_1)
	return err
}

const getAccountCacheForID = `-- name: GetAccountCacheForID :one
SELECT
    id, name, email, provider, provider_id, created
FROM
    apollo.account_cache
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetAccountCacheForID(ctx context.Context, id pgtype.UUID) (ApolloAccountCache, error) {
	row := q.db.QueryRow(ctx, getAccountCacheForID, id)
	var i ApolloAccountCache
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Created,
	)
	return i, err
}
