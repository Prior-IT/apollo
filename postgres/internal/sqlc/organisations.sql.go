// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: organisations.sql

package sqlc

import (
	"context"
)

const addUserToOrganisation = `-- name: AddUserToOrganisation :exec
INSERT INTO apollo.organisation_users (user_id, organisation_id)
	VALUES ($1, $2)
`

func (q *Queries) AddUserToOrganisation(ctx context.Context, userID int32, organisationID int32) error {
	_, err := q.db.Exec(ctx, addUserToOrganisation, userID, organisationID)
	return err
}

const createOrganisation = `-- name: CreateOrganisation :one
INSERT INTO apollo.organisations (name)
	VALUES ($1)
RETURNING
	id, name
`

func (q *Queries) CreateOrganisation(ctx context.Context, name string) (ApolloOrganisation, error) {
	row := q.db.QueryRow(ctx, createOrganisation, name)
	var i ApolloOrganisation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteOrganisation = `-- name: DeleteOrganisation :exec
DELETE FROM apollo.organisations
WHERE id = $1
`

func (q *Queries) DeleteOrganisation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrganisation, id)
	return err
}

const getAmountOfOrganisations = `-- name: GetAmountOfOrganisations :one
SELECT
	COUNT(id)
FROM
	apollo.organisations
`

func (q *Queries) GetAmountOfOrganisations(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAmountOfOrganisations)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOrganisation = `-- name: GetOrganisation :one
SELECT
	id, name
FROM
	apollo.organisations
WHERE
	id = $1
LIMIT 1
`

func (q *Queries) GetOrganisation(ctx context.Context, id int32) (ApolloOrganisation, error) {
	row := q.db.QueryRow(ctx, getOrganisation, id)
	var i ApolloOrganisation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listOrganisations = `-- name: ListOrganisations :many
SELECT
	id, name
FROM
	apollo.organisations
`

func (q *Queries) ListOrganisations(ctx context.Context) ([]ApolloOrganisation, error) {
	rows, err := q.db.Query(ctx, listOrganisations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApolloOrganisation
	for rows.Next() {
		var i ApolloOrganisation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganisationsForUser = `-- name: ListOrganisationsForUser :many
SELECT
	o.id, o.name
FROM
	apollo.organisations AS o
	INNER JOIN apollo.organisation_users AS ou ON o.id = ou.organisation_id
WHERE
	ou.user_id = $1
`

func (q *Queries) ListOrganisationsForUser(ctx context.Context, userID int32) ([]ApolloOrganisation, error) {
	rows, err := q.db.Query(ctx, listOrganisationsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApolloOrganisation
	for rows.Next() {
		var i ApolloOrganisation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersInOrganisation = `-- name: ListUsersInOrganisation :many
SELECT
	u.id, u.name, u.email, u.joined, u.admin
FROM
	apollo.users AS u
	INNER JOIN apollo.organisation_users AS ou ON u.id = ou.user_id
WHERE
	ou.organisation_id = $1
`

func (q *Queries) ListUsersInOrganisation(ctx context.Context, organisationID int32) ([]ApolloUser, error) {
	rows, err := q.db.Query(ctx, listUsersInOrganisation, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApolloUser
	for rows.Next() {
		var i ApolloUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Joined,
			&i.Admin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromOrganisation = `-- name: RemoveUserFromOrganisation :exec
DELETE FROM
	apollo.organisation_users
WHERE
	user_id = $1 AND organisation_id = $2
`

func (q *Queries) RemoveUserFromOrganisation(ctx context.Context, userID int32, organisationID int32) error {
	_, err := q.db.Exec(ctx, removeUserFromOrganisation, userID, organisationID)
	return err
}
