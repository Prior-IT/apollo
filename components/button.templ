package components

type ButtonType int

const (
	ButtonType_Primary ButtonType = iota
	ButtonType_Secondary
	ButtonType_Accent
	ButtonType_Inverted
	ButtonType_Danger
)

var buttonTypeClass = map[ButtonType]string{
	ButtonType_Primary:   "bg-primary enabled:hover:bg-primary-dark text-white shadow-primary-dark/60",
	ButtonType_Secondary: "border border-primary text-primary enabled:hover:bg-primary-dark enabled:hover:text-white enabled:hover:border-primary-dark shadow-primary-dark/60",
	ButtonType_Accent:    "bg-accent enabled:hover:bg-accent-dark text-white shadow-accent-dark/60",
	ButtonType_Inverted:  "bg-white enabled:hover:bg-gray-50 text-body shadow-white/40",
	ButtonType_Danger:    "border border-danger text-danger enabled:hover:bg-danger enabled:hover:text-white enabled:hover:border-danger shadow-danger/60",
}

type HtmlType int

const (
	HtmlType_Button HtmlType = iota
	HtmlType_Submit
	HtmlType_Reset
)

var htmlTypeToString = map[HtmlType]string{
	HtmlType_Button: "button",
	HtmlType_Submit: "submit",
	HtmlType_Reset:  "reset",
}

type ButtonProps struct {
	// The semantic button type, different types will have consistently different visual styles
	Type ButtonType `default:"ButtonType_Primary"`
	// The HTML button type
	HtmlType HtmlType `default:"HtmlType_Button"`
	// If set, clicking the button will trigger a htmx get request
	HxGet string
	// If set, the button will become a standalone, full-width button
	Block bool
	// If set, the button will function as a link
	Link bool
	// If set, the button will be disabled
	Disabled bool
	// Additional class(es) to append to the button element
	Class string
	// Additional attributes that will be added to the button element
	Attrs templ.Attributes
}

templ Button(props ButtonProps) {
	<button
		type={ htmlTypeToString[props.HtmlType] }
		class={
			"relative",
			"flex flex-row items-center justify-center",
			"rounded-lg py-2 px-8 shadow enabled:hover:shadow-sm",
			"disabled:opacity-50 disabled:cursor-not-allowed",
			"transition-button enabled:hover:scale-[1.03] enabled:active:scale-[0.97]",
			props.Class,
			buttonTypeClass[props.Type],
			templ.KV("w-full block", props.Block),
			templ.KV("inline-block", !props.Block),
		}
		if len(props.HxGet) > 0 {
			hx-disabled-elt="this"
			hx-on::after-request="this.classList.remove('htmx-request') // see https://github.com/bigskysoftware/htmx/issues/2295"
			hx-get={ props.HxGet }
		}
		if props.Link {
			role="link"
		} else {
			role="button"
		}
		if props.Disabled {
			disabled
		}
		{ props.Attrs... }
	>
		<i class="size-4 htmx-indicator animate-spin text-center" aria-hidden="true" data-feather="loader"></i>
		<span class="hide-during-request flex flex-row items-center justify-center gap-2">
			{ children... }
		</span>
	</button>
}
